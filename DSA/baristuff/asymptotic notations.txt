Asymptotic Notation

Big-O notation : Upper bound
Big-Omega notation : lower bound
Theta notation : average bound

The most useful is Theta

The big theta notation is symmetric: f(x) = O(g(x)) <=> g(x) = O(f(x))

f(x) = O(g(x)) means that the graphs of f(x) and g(x) grow in the same rate or behave similarly for big enough values of x
Ó¨(f(x)) = {g: N0 -> R and c1, c2, n0 > 0, where c1 < abs(g(n) / f(n)), for every n > n0 and abs is the absolute value}

The function f(n) = O(g(n)) if there exists positive constants c and n0 such that f(n) <=c*g(n)  for all n >= n0

example:
f(n) = 2n+3
2n+3 <= 10n for all n>=1 where g(n) = n and c is 10

f(n) = O(n)
10 is arbitrary, just make sure the inequality is true

what if g(n) is n^2?
2n+3 <= 5n^2 for all n >=1.
This is also true still, Big O is upper bound. In this example, everything greater than n including n is upper bound
and everything below and including n becomes lower bound. n itself is average bound
You cannot say f(n) = O(log(n)) because the inequality would not be true. You can say f(n) = O(n), f(n) = O(n^2), and f(n) = O(2^n)
When writing big O, try to write the closest function

#1 < logn < root(n) < n < nlogn < n^2 < n^3< .... 2^n < 3^n < n^n


Omega definition
The function f(n)= Omega(g(n)) if there exists positive constants c and n0 such that f(n) >= c*g(n) for all n >= n0
Example:

f(n) = 2n + 3
2n + 3 >= 1 * n for all n >= 1 where f(n) = 2n + 3, c is 1, and g(n)= n
We can say f(n) = Omega(n)
we can also say f(n) = Omega(logn) because 2n+3 >= logn is still true



Theta Notation
The function f(n)= Theta(g(n)) if there exists positive constants c1, c2, and n0 such that 
c1*g(n) <= f(n) <= c2*g(n)

f(n) = 2n + 3

DO NOT CONFUSE THIS WITH BEST/WORST CASE. YOU CAN USE ANY NOTATION FOR BEST CASE AND ANY NOTATION FOR WORST CASE


What if we did factorial?
Assume f(n) = n! ... we can say

1^n <= 1 * 2 * 3 * 4 * 5 ...*n <= n^n
Now both sides of the inequality are not the same type of notation therefore we do not know the theta

We can say O(n^n) aka upperbound and Omega(1) aka lowerbound. What does this mean? 
It means that for the smaller values of n it will be closer to Omega (lowerbound) and that for larger values of n it will be closer to 
n^n